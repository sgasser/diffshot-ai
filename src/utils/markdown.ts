import path from 'path';
import { listFiles, fileExists } from './fs.js';
import { getGitDiff } from './git.js';
import { CONFIG } from '../config/index.js';

export interface MarkdownSummary {
  summary: string;
  screenshots: string[];
}

/**
 * Generate a markdown summary of changes and screenshots for PR comments
 */
export async function generateMarkdownSummary(
  changedFiles: string[],
  workDir: string,
  branch: string = 'UNCOMMITTED',
  changeAnalysis: string = ''
): Promise<MarkdownSummary> {
  const outputDir = path.join(workDir, CONFIG.SCREENSHOT_DIR);
  const screenshots: string[] = [];

  if (await fileExists(outputDir)) {
    const files = await listFiles(outputDir);
    screenshots.push(...files.filter((f) => f.endsWith('.png') && f !== 'init.png'));
  }

  let diffSummary = '';
  try {
    const diff = getGitDiff(branch, workDir);
    diffSummary = summarizeGitDiff(diff, changedFiles);
  } catch {
    diffSummary = `Changes detected in ${changedFiles.length} file${changedFiles.length !== 1 ? 's' : ''}`;
  }

  const markdown = generateMarkdown(diffSummary, screenshots, changedFiles, changeAnalysis);

  return {
    summary: markdown,
    screenshots,
  };
}

/**
 * Summarize git diff output into human-readable format
 */
function summarizeGitDiff(diff: string, changedFiles: string[]): string {
  if (!diff.trim()) {
    return `Updated ${changedFiles.length} file${changedFiles.length !== 1 ? 's' : ''}`;
  }

  const fileTypes = new Set<string>();
  const additions = (diff.match(/^\+(?!\+)/gm) || []).length;
  const deletions = (diff.match(/^-(?!-)/gm) || []).length;

  changedFiles.forEach((file) => {
    const ext = path.extname(file).slice(1);
    if (ext) fileTypes.add(ext);
  });

  const fileTypeStr = Array.from(fileTypes).join(', ');
  const changeStr =
    additions > 0 && deletions > 0
      ? `${additions} additions, ${deletions} deletions`
      : additions > 0
        ? `${additions} additions`
        : deletions > 0
          ? `${deletions} deletions`
          : 'changes';

  return `Updated ${changedFiles.length} ${fileTypeStr} file${changedFiles.length !== 1 ? 's' : ''} (${changeStr})`;
}

/**
 * Generate the actual markdown content
 */
function generateMarkdown(
  diffSummary: string,
  screenshots: string[],
  changedFiles: string[],
  changeAnalysis: string = ''
): string {
  const markdown = [];

  markdown.push('## ðŸ“¸ DiffShot Summary');
  markdown.push('');

  markdown.push(`**Changes:** ${diffSummary}`);
  markdown.push('');

  if (changeAnalysis) {
    markdown.push('**What changed:**');
    markdown.push(changeAnalysis);
    markdown.push('');
  }

  if (changedFiles.length > 0) {
    markdown.push('**Modified files:**');
    changedFiles.forEach((file) => {
      markdown.push(`- \`${file}\``);
    });
    markdown.push('');
  }

  if (screenshots.length > 0) {
    markdown.push(`**Screenshots generated (${screenshots.length}):**`);
    screenshots.sort().forEach((screenshot) => {
      const name = path.basename(screenshot, '.png');
      const displayName = name.replace(/[-_]/g, ' ').replace(/\b\w/g, (l) => l.toUpperCase());
      markdown.push(`- ![${displayName}](${path.join(CONFIG.SCREENSHOT_DIR, screenshot)})`);
    });
  } else {
    markdown.push(
      '**No screenshots generated** - changes may not affect UI or dev server was not running'
    );
  }

  markdown.push('');
  markdown.push('*Generated by [DiffShot](https://github.com/sgasser/diffshot-ai) ðŸ¤–*');

  return markdown.join('\n');
}
